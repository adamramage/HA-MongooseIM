{{- if .Values.app_config.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "mongooseim.labels" . | nindent 4 }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  name: {{ include "mongooseim.fullname" . }}-appconfig
data:
  app.config: |-
    [
    {kernel, [
      {logger_level, notice},
      {logger, [
        %% Default filters applied to all events before passing them to handlers:
        {filters, log, [
          {remove_fields_filter, {fun mongoose_log_filter:remove_fields_filter/2, [req, reply_body]}},
          {format_packet_filter, {fun mongoose_log_filter:format_packet_filter/2, no_state}},
          {format_acc_filter, {fun mongoose_log_filter:format_acc_filter/2, no_state}},
          {format_c2s_state_filter, {fun mongoose_log_filter:format_c2s_state_filter/2, no_state}},
          {format_stacktrace_filter, {fun mongoose_log_filter:format_stacktrace_filter/2, no_state}},
          {format_term_filter, {fun mongoose_log_filter:format_term_filter/2, [toml_value]}}
        ]},
        %% Shell log handler:
        {handler, shell_log, logger_std_h, #{
          level => all,
          formatter => {mongoose_flatlog_formatter, #{
            map_depth => 3,
            term_depth => 50
          }}
        }},
        %% JSON file log handler:
        {handler, disk_json_log, logger_disk_log_h, #{
          level => all,
          config => #{
            file => "//var/log/mongooseim/mongooseim.json",
            type => wrap,
            max_no_files => 5,
            max_no_bytes => 2097152,
            sync_mode_qlen => 2000, % If sync_mode_qlen is set to the same value as drop_mode_qlen,
            drop_mode_qlen => 2000, % synchronous mode is disabled. That is, the handler always runs
            flush_qlen => 5000,     % in asynchronous mode, unless dropping or flushing is invoked.
            overload_kill_enable => true
          },
          formatter => {mongoose_json_formatter, #{
            format_depth => 10,
            format_chars_limit => 3000,
            depth => 10
          }}
        }}
      ]}]},
    {setup, [{verify_directories, false}]},
    {mnesia, [{dir, "//var/lib/mongooseim"}]},
    {ssl, [
      {session_lifetime, 600}, % 10 minutes
      {protocol_version, ['tlsv1.2'
        %, 'tlsv1.3'
      ]}
    ]},
    {nkservice, [
      %% Variable is called log_path, however it is used for caching
      {log_path, "//var/lib/mongooseim/nksip"}
    ]},
    %% Swagger spec
    {cowboy_swagger,
      [
        {global_spec,
          #{swagger => "2.0",
            info => #{
            title => "MongooseIM REST API",
            description =>
            "This is documentation of `MongooseIM REST API`.
            REST API for client developers [MongooseIM REST API](https://esl.github.io/MongooseDocs/latest/rest-api/Client-frontend/)",
            version => "0.1.0"
          }
            }
        }
      ]
    },
    {exometer_core, [
      {mongooseim_report_interval, 60000}, %% 60 seconds
      {report, [
        {reporters, [
          {exometer_report_graphite, [
            {prefix, "mongooseim"},
            {connect_timeout, 5000},
            {host, "mongooseim-graphite-exporter"},
            {port, 9109},
            {api_key, ""}
          ]}
        ]}
      ]}
    ]}
    ].
{{- end }}
